{"version":3,"sources":["components/Card/index.js","components/Nav/index.js","components/Wrapper/index.js","components/Title/index.js","Container.js","Row.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","value","id","onClick","handleClick","alt","name","src","image","Nav","title","rightWrong","score","topScore","Wrapper","children","Title","Container","concat","fluid","Row","App","state","cards","currentScore","clicked","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","array","shuffledCards","sort","Math","random","console","log","_this2","this","components_Wrapper","components_Nav","components_Title","src_Container","src_Row","map","friend","components_Card","key","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.665e4cd0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n\r\n\r\n\r\nconst Card = props => (\r\n\r\n  <div \r\n    className=\"card\" \r\n    value={props.id} \r\n    onClick={() => props.handleClick(props.id)}\r\n  >\r\n    <div className=\"img-container\">\r\n    \r\n      <img alt={props.name} src={props.image}/>\r\n      \r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Nav.css\";\r\nconst Nav = props => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <p>{props.title}</p>\r\n      </li>|\r\n\r\n      <li>{props.rightWrong}</li>|\r\n\r\n      <li>Current Score: {props.score}</li>|\r\n\r\n      <li>Top Score: {props.topScore}</li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\r\n\r\nexport default Title;","import React from \"react\";\r\n\r\nconst Container = props =>\r\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} id=\"container\">\r\n    {props.children}\r\n  </div>;\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nconst Row = props =>\r\n\r\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\r\n    {props.children}\r\n  </div>;\r\n\r\nexport default Row;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport cards from \"./cards.json\";\n\nfunction shuffleCards(array) {\n  array.sort(() => Math.random() - 0.5);\n  console.log(array);\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    cards,\n    currentScore: 0,\n    topScore: 0,\n    rightWrong: \"\",\n    clicked: [],\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ rightWrong: \"You win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      rightWrong: \"Wrong!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledCards = shuffleCards(cards);\n    this.setState({ cards: shuffledCards });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"Megaman!\"\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          rightWrong={this.state.rightWrong}\n        />\n\n        <Title>\n          Click each once to gain score, but don't forget what you've already clicked!\n        </Title>\n\n        <Container>\n          <Row>\n            {this.state.cards.map(friend => (\n                <Card\n                  key={friend.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={friend.id}\n                  image={friend.image}\n                />\n            ))}\n          </Row>\n          \n        </Container>\n        <footer class=\"footer bg-primary fixed-bottom text-center\">Megaman Memory Game</footer>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}